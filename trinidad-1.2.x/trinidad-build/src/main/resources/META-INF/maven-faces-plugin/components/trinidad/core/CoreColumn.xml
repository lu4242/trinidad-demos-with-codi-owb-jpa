<?xml version="1.0" encoding="utf-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<faces-config version="1.2" xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:tr="http://myfaces.apache.org/trinidad"
              xmlns:xi="http://www.w3.org/2001/XInclude"
              xmlns:mfp="http://myfaces.apache.org/maven-faces-plugin"
              xmlns:fmd="http://java.sun.com/xml/ns/javaee/faces/design-time-metadata">
  <component>
    <description><![CDATA[Component that is used as a child of the Table component. The Column
component defines the header, footer and data for a single column in the
Table.]]>
    </description>
    <icon>
      <small-icon>/org/apache/myfaces/trinidadinternal/metadata/icons/column.gif</small-icon>
    </icon>
    <component-type>org.apache.myfaces.trinidad.CoreColumn</component-type>
    <component-class>org.apache.myfaces.trinidad.component.core.data.CoreColumn</component-class>

    <xi:include href="includes/CommonAttrs.xml" xpointer="/faces-config/component/*"/>
    <xi:include href="includes/CoreJSEvents.xml" xpointer="/faces-config/component/*"/>
    <property>
      <description><![CDATA[The alignment for this column. The legal values are "start", "end" and "center", for left-justified, right-justified, and center-justified respectively in LTR display. The default value is "start".]]>
      </description>
      <property-name>align</property-name>
      <property-class>java.lang.String</property-class>
      <default-value>start</default-value>
      <property-extension>
        <fmd:property-metadata>
          <fmd:required>false</fmd:required>
          <fmd:property-values>start end center left right</fmd:property-values>
        </fmd:property-metadata>
      </property-extension>
    </property>

     <property>
      <description><![CDATA[The default sort order of the column. The legal values are "ascending" or "descending" for ascending sorting or descending sorting on a first click respectively. The default value is "ascending".]]>
      </description>
      <property-name>defaultSortOrder</property-name>
      <property-class>java.lang.String</property-class>
      <default-value>ascending</default-value>
      <property-extension>
        <fmd:property-metadata>
          <fmd:required>false</fmd:required>
          <fmd:property-values>ascending descending</fmd:property-values>
        </fmd:property-metadata>
      </property-extension>
    </property>

    <property>
      <description><![CDATA[the preferred width of this column, e.g., "30%", "100px".]]></description>
      <property-name>width</property-name>
      <property-class>java.lang.String</property-class>
    </property>
    <property>
      <description><![CDATA[text to display in the header of the column.  This is a convenience that generates output equivalent to adding a "header" facet containing an outputText.]]>
      </description>
      <property-name>headerText</property-name>
      <property-class>java.lang.String</property-class>
      <property-extension>
        <mfp:property-metadata>
          <mfp:translatable>true</mfp:translatable>
        </mfp:property-metadata>
      </property-extension>
    </property>
    <property>
      <description><![CDATA[whether or not the column contents should be allowed to wrap]]>
      </description>
      <property-name>noWrap</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
    </property>
    <property>
      <description><![CDATA[whether or not the column header
should be allowed to wrap]]></description>
      <property-name>headerNoWrap</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
    </property>
    <property>
      <description><![CDATA[<html>whether or not the column is sortable. A sortable column has a clickable header that (when clicked) sorts the table by that column's property. Note that in order for a column to be sortable, this attribute must be set to "true" and the underlying model must support sorting by this column's property. <p> This column's "sortProperty" attribute must be set if sorting is desired.</p></html>]]>
      </description>
      <property-name>sortable</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
    </property>
    <property>
      <description><![CDATA[whether or not the children of this column should be rendered on separate rows. Setting this attribute to true will cause each child to render in its own row. Setting this to false will cause all the children to be rendered in one cell, which will rowSpan across the rows of the Columns whose children are rendered on separate rows.]]>
      </description>
      <property-name>separateRows</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
      <property-extension>
        <mfp:unsupported-agents>phone voice</mfp:unsupported-agents>
      </property-extension>
    </property>
    <property>
      <description><![CDATA[Whether or not this column is a row header column.]]></description>
      <property-name>rowHeader</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
    </property>
    <component-extension>
      <mfp:component-supertype>org.apache.myfaces.trinidad.Column</mfp:component-supertype>
      <mfp:renderer-type>org.apache.myfaces.trinidad.Column</mfp:renderer-type>
      <mfp:tag-name>tr:column</mfp:tag-name>
      <mfp:tag-class>org.apache.myfaces.trinidadinternal.taglib.core.data.CoreColumnTag</mfp:tag-class>
      <mfp:long-description><![CDATA[<P>
            The immediate children of a Table component must all be
            <code>&lt;tr:column&gt;</code> components. Each visible Trinidad Column
            component creates a separate column in the Table.
          </P>
          <P>
            Use the &quot;header&quot; facet on a Column to create the column header.
            The following example creates a two-column table with the column headers -
            &quot;Firstname&quot; and &quot;Lastname&quot;:
          </P>
          <pre>
  <tr:table>
    <tr:column>
      <f:facet name="header">
        <tr:outputText value="Firstname"/>
      </f:facet>
      ...
    </tr:column>
    <tr:column>
      <f:facet name="header">
        <tr:outputText value="Lastname"/>
      </f:facet>
      ...
    </tr:column>
  </tr:table>
          </pre>
          <P>
            The child components of each Column display the data for each row in
            that column. The Column does not create child components per row;
            instead, each child is repeatedly rendered (stamped) once per
            row. Because of this stamping behavior, only certain types of
            components are supported as children inside a Column. Supported
            components include all components with no behavior and most
            components that implement the EditableValueHolder or ActionSource
            interfaces.
          </P>
          <P>
            As each row is stamped, the data for the current row ( see
            <code>getRowData()</code> on the Table)
            is copied into an EL reachable property.
            The name of this property is defined by the <code>var</code>
            property on the Table. Once the Table has completed rendering, this
            property is removed (or reverted back to its previous value). In
            the following example, the data for each row is placed under the EL
            property &quot;row&quot;. Each Column displays the data for each row by getting
            further properties from the &quot;row&quot; property:
          </P>
          <pre>
  <tr:table var="row" value="#{myBean.employees}">
    <tr:column>
      <tr:outputText value="#{row.firstname}"/>
    </tr:column>
    <tr:column>
      tr:outputText value="#{row.lastname}"/>
    </tr:column>
  </tr:table>
          </pre>

          <section name="Formatting">
            <p>
              The Column component supports the following attributes related to
              formatting:
              <dl>
                <dt>align</dt>

                <dd>The type of alignment to use for this column. This
                atribute controls left/start, right/end, or center justification of the
                column data.
                </dd>

                <dt>width</dt>
                <dd>The width of this column.
                </dd>

                <dt>noWrap</dt>
                <dd>Controls whether long lines of text in the column data should
                be wrapped.</dd>

                <dt>headerNoWrap</dt>
                <dd>Controls whether long lines of text in the column header should
                  be wrapped.</dd>

                <dt>separateRows</dt> <dd>Controls whether each child of this
                column should be rendered in separate cells, or inside the same
                cell.</dd>
              </dl>
            </p>
          </section>

          <section name="Sorting">
            <P>
              In order to make this Column sortable, set the &quot;sortable&quot;
              property to true and set &quot;sortProperty&quot; to the name of the
              model that this column will sort.  Sorting can be programatically
              turned on with the <code>setSortCritiera()</code> method on the\
              table.
            </P>
          </section>

          <section name="Column Groups">
            <P>
              <code>&lt;tr:column&gt; </code> tags can be nested to produce
              groups of columns. The header of a column group spans across
              all the columns it contains. The following example creates
              a column group that has the header &quot;Name&quot; and contains
              two sub columns with headers &quot;First&quot; and &quot;Last&quot;:
            </P>
          <pre>
  <tr:table var="row" value="#{myBean.employees}">
    <tr:column>
      <f:facet name="header">
        <tr:outputText value="Name"/>
      </f:facet>
      <tr:column>
        <f:facet name="header">
          <tr:outputText value="First"/>
        </f:facet>
        <tr:outputText value="#{row.firstname}"/>
      </tr:column>
      <tr:column>
        <f:facet name="header">
          <tr:outputText value="Last"/>
        </f:facet>
        tr:outputText value="#{row.lastname}"/>
      </tr:column>
    </tr:column>
  </tr:table>
          </pre>
          </section>]]>
      </mfp:long-description>
      <mfp:author>Brian Albers</mfp:author>
      <mfp:component-metadata/>
      <mfp:uix2-local-name>column</mfp:uix2-local-name>
      <fmd:component-metadata>
        <fmd:default-property>headerText</fmd:default-property>
        <fmd:preferred-child-components>org.apache.myfaces.trinidad.CoreOutputText</fmd:preferred-child-components>
        <fmd:required-ancestor-contracts>org-apache-myfaces-trinidad-corecolumn-holder</fmd:required-ancestor-contracts>
        <fmd:satisfied-contracts>org-apache-myfaces-trinidad-corecolumn-holder</fmd:satisfied-contracts>
      </fmd:component-metadata>
    </component-extension>
  </component>
</faces-config>
