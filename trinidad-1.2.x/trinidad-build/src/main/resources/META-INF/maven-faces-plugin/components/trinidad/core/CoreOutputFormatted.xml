<?xml version="1.0" encoding="utf-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<faces-config version="1.2" xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:tr="http://myfaces.apache.org/trinidad"
              xmlns:xi="http://www.w3.org/2001/XInclude"
              xmlns:mfp="http://myfaces.apache.org/maven-faces-plugin"
              xmlns:fmd="http://java.sun.com/xml/ns/javaee/faces/design-time-metadata">
  <component>
    <description><![CDATA[The outputFormatted bean accepts a string in its "value" attribute
        containing a very limited set of HTML markup and outputs formatted
        results.]]>
    </description>
    <icon>
      <!-- small-icon>/org/apache/myfaces/trinidadinternal/metadata/icons/outputFormatted.png</small-icon -->
    </icon>
    <component-type>org.apache.myfaces.trinidad.CoreOutputFormatted</component-type>
    <component-class>org.apache.myfaces.trinidad.component.core.output.CoreOutputFormatted</component-class>
    <property>
      <description><![CDATA[the style usage, intended to make it easier to
              put the correct style on the text.
              Set this attribute when the outputFormatted
              is for instruction text, page stamp text, or inContextBranding
              text.
              The valid values are "instruction" ,
              "pageStamp", and "inContextBranding".
              If styleUsage and styleClass attributes are both set,
              the styleClass attribute takes precedence.]]>
      </description>
      <property-name>styleUsage</property-name>
      <property-class>java.lang.String</property-class>
      <property-extension>
        <fmd:property-metadata>
          <fmd:property-values>pageStamp instruction inContextBranding</fmd:property-values>
        </fmd:property-metadata>
      </property-extension>
    </property>

    <xi:include href="includes/CommonAttrs.xml" xpointer="/faces-config/component/*"/>
    <xi:include href="includes/CoreJSEvents.xml" xpointer="/faces-config/component/*"/>

    <component-extension>
      <mfp:component-supertype>org.apache.myfaces.trinidad.Output</mfp:component-supertype>
      <mfp:renderer-type>org.apache.myfaces.trinidad.Formatted</mfp:renderer-type>
      <mfp:tag-name>tr:outputFormatted</mfp:tag-name>
      <mfp:tag-class>org.apache.myfaces.trinidadinternal.taglib.core.output.CoreOutputFormattedTag</mfp:tag-class>
      <mfp:long-description><![CDATA[<html:p>
        The outputFormatted bean accepts a string in its &quot;value&quot; attribute
        containing a very limited set of HTML markup and outputs formatted
        results.  It is not intended as anything near to a generic HTML
        output engine, and will never be such a bean.  Developers
        needing full HTML output should use &lt;f:verbatim&gt;
        or &lt;tr:outputText&gt; with escape=&quot;false&quot;.
        </html:p>
        <html:p>
        What this bean <html:em>does</html:em> provide is a limited
        ability to use a single source for translated or user-provided
        formatted text without further parsing or filtering or
        dangerous constructs (e.g., Javascript), and with some hope
        of successful output to non-HTML displays.  It also supports
        more attributes than an unescaped outputText tag - for example,
        it supports styleClass.
        </html:p>
        <html:p>
        This component supports the following HTML markup:
        <html:ul>
          <html:li>&lt;br&gt;</html:li>
          <html:li>&lt;hr&gt;</html:li>
          <html:li>&lt;li&gt;, &lt;ol&gt;, &lt;ul&gt;</html:li>
          <html:li>&lt;p&gt;</html:li>
          <html:li>&lt;b&gt;</html:li>
          <html:li>&lt;i&gt;</html:li>
          <html:li>&lt;tt&gt;</html:li>
          <html:li>&lt;big&gt;</html:li>
          <html:li>&lt;small&gt;</html:li>
          <html:li>&lt;pre&gt;</html:li>
          <html:li>&lt;span&gt;</html:li>
          <html:li>&lt;a&gt;</html:li>
        </html:ul>
        and the following entities:
        <html:ul>
          <html:li>&amp;lt;</html:li>
          <html:li>&amp;gt;</html:li>
          <html:li>&amp;amp;</html:li>
          <html:li>&amp;reg;</html:li>
          <html:li>&amp;copy;</html:li>
          <html:li>&amp;nbsp;</html:li>
          <html:li>&amp;quot;</html:li>
        </html:ul>
        </html:p>
        <html:p>
        Elements or entities other than these will be ignored.  In addition,
        the CSS attributes (&quot;class&quot; and &quot;style&quot;) and &quot;href&quot; are supported -
        all others are ignored.
        </html:p>
        <html:p>
        No guarantee is made that the input HTML will
        be output without modification.  For example, paragraph
        and list-item elements will always be closed even if left
        open in the input text.  Other HTML markup may be replaced
        with output more appropriate to the current look-and-feel
        or user agent.
        </html:p>
        <html:p>
        Note: The escaping rules are different in a .jspx file than they are in
        a .jsp file. See the example below.
        </html:p>]]>
      </mfp:long-description>
      <mfp:example>
        <mfp:source-description>In a .jspx:</mfp:source-description>
        <mfp:source-code>
          <![CDATA[
tr:outputFormatted
 styleUsage="instruction"
 value="&lt;b>simple outputFormatted&lt;/b>"/>
          ]]>
        </mfp:source-code>
      </mfp:example>
      <mfp:example>
        <mfp:source-description>In a .jsp:</mfp:source-description>
        <mfp:source-code>
          <![CDATA[
<tr:outputFormatted
  styleUsage="instruction"
  value="<b>simple outputFormatted</b>"/>
          ]]>
        </mfp:source-code>
      </mfp:example>
      <mfp:author>Adam Winer</mfp:author>
      <mfp:component-metadata/>
      <mfp:uix2-local-name>formattedText</mfp:uix2-local-name>
      <fmd:component-metadata>
        <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
        <fmd:default-property>value</fmd:default-property>
      </fmd:component-metadata>
    </component-extension>
  </component>
</faces-config>
