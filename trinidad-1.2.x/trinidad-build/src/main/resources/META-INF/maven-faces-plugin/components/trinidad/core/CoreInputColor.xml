<?xml version="1.0" encoding="utf-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<faces-config version="1.2" xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:tr="http://myfaces.apache.org/trinidad"
              xmlns:xi="http://www.w3.org/2001/XInclude"
              xmlns:mfp="http://myfaces.apache.org/maven-faces-plugin"
              xmlns:fmd="http://java.sun.com/xml/ns/javaee/faces/design-time-metadata">
  <component>
    <description><![CDATA[The inputColor control creates a text field for entering colors and
          a button for picking colors from a palette.]]>
    </description>
    <icon>
      <!-- small-icon>/org/apache/myfaces/trinidadinternal/metadata/icons/inputColor.png</small-icon -->
    </icon>
    <component-type>org.apache.myfaces.trinidad.CoreInputColor</component-type>
    <component-class>org.apache.myfaces.trinidad.component.core.input.CoreInputColor</component-class>
    <xi:include href="includes/CommonFormControls.xml" xpointer="/faces-config/component/*"/>
    <property>
      <description><![CDATA[If true, attempt to use less screen real-estate to display the
          inputColor.  For example, this
          might cause the text area not to be rendered, and the color
          swatch conveys the currently selected color.]]>
      </description>
      <property-name>compact</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
    </property>
    <property>
      <description><![CDATA[The id of the inline chooseColor component which can be used to
          update the Color value for this inputColor. Use the same syntax as partialTriggers
          if the components are separated by Naming Containers.]]>
      </description>
      <property-name>chooseId</property-name>
      <property-class>java.lang.String</property-class>
      <property-extension>
        <mfp:property-metadata>
          <mfp:scoped-id-holder>true</mfp:scoped-id-holder>
        </mfp:property-metadata>
      </property-extension>      
    </property>
    <property>
      <description><![CDATA[whether the element is read-only.]]></description>
      <property-name>readOnly</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
    </property>
    <property>
      <description><![CDATA[whether the element is disabled.]]></description>
      <property-name>disabled</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
    </property>
    <property>
      <description><![CDATA[whether previous values of text fields in the form
          should be remembered and offered for auto completion.]]>
      </description>
      <property-name>autoComplete</property-name>
      <property-class>java.lang.String</property-class>
      <default-value>on</default-value>
      <property-extension>
        <fmd:property-metadata>
          <fmd:required>false</fmd:required>
          <fmd:property-values>on off</fmd:property-values>
        </fmd:property-metadata>
      </property-extension>
    </property>
    <property>
      <description><![CDATA[the label of the bean.]]></description>
      <property-name>label</property-name>
      <property-class>java.lang.String</property-class>
      <suggested-value>Label {0}</suggested-value>
      <property-extension>
        <mfp:property-metadata>
          <mfp:translatable>true</mfp:translatable>
          <mfp:short-description>${md:getTranslatedString("SD_ATTRGROUP_INLINEMESSAGINGPROMPT_ATTR_PROMPT")}</mfp:short-description>
        </mfp:property-metadata>
        <fmd:property-metadata>
          <fmd:preferred>true</fmd:preferred>
        </fmd:property-metadata>
      </property-extension>
    </property>
    <property>
      <description><![CDATA[a boolean value that controls whether the component
provides label and message support;  when set to "true", the component will
not display messaging support or the label (these attributes may be ignored: label,
labelAndAccessKey, accessKey, showRequired,
tip), and may use simpler layout primitives]]>
      </description>
      <property-name>simple</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
    </property>
    <property>
      <description><![CDATA[the number of columns to display in the text
          control. If no value is specified, a default
          value will be derived from the current converter, if one
   is attached.]]>
      </description>
      <property-name>columns</property-name>
      <property-class>int</property-class>
      <property-extension>
        <mfp:property-metadata/>
        <fmd:property-metadata>
          <fmd:preferred>true</fmd:preferred>
        </fmd:property-metadata>
      </property-extension>
    </property>

    <property>
      <description><![CDATA[event handler for when the value is changed.]]></description>
      <property-name>onchange</property-name>
      <property-class>java.lang.String</property-class>
      <property-extension>
        <mfp:property-metadata/>
        <fmd:property-metadata>
          <fmd:category-id>EVENTS</fmd:category-id>
        </fmd:property-metadata>
      </property-extension>
    </property>

    <xi:include href="includes/CommonAttrs.xml" xpointer="/faces-config/component/*"/>
    <xi:include href="includes/CoreJSEvents.xml" xpointer="/faces-config/component/*"/>
    <xi:include href="includes/FocusJSEvents.xml" xpointer="/faces-config/component/*"/>

    <property>
      <description><![CDATA[whether the associated control displays a visual indication of required user input. If a "required" attribute is also present, both the "required" attribute and the
          "showRequired" attribute must be false for the visual indication not to be displayed.]]>
      </description>
      <property-name>showRequired</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
      <property-extension>
        <mfp:property-metadata/>
        <fmd:property-metadata>
          <fmd:category-id>APPEARANCE</fmd:category-id>
        </fmd:property-metadata>
      </property-extension>
    </property>
    <property>
      <description><![CDATA[<html>
 Character used to gain quick access to
               the form element specified by the
         <code>for</code>, if set (or this component itself,
              if it is a "non-simple" form element).
              For accessibility reasons, this functionality is not supported
              in screen reader mode.
              If the same access key appears in multiple locations in the
              same page of output, the rendering user agent will cycle
              among the elements accessed by the similar keys.
              <p>
                This attribute is sometimes referred to as the "mnemonic".
                </p></html>]]>
      </description>
      <property-name>accessKey</property-name>
      <property-class>char</property-class>
      <property-extension>
        <mfp:property-metadata>
          <mfp:short-description>${md:getTranslatedString("SD_ATTRGROUP_ACCESSKEY_ATTR_ACCESSKEY")}</mfp:short-description>
        </mfp:property-metadata>
      </property-extension>
    </property>
    <property>
      <description><![CDATA[<html>
 An attribute that will simultaneously set both the "value"
              and "accessKey" attributes from a single value, using
              conventional ampersand ('&amp;') notation.
              <p>
              For example, setting this attribute to "L&amp;amp;abel" will
              set the label to "Label" and the access key to 'a'.
              </p></html>]]>
      </description>
      <property-name>labelAndAccessKey</property-name>
      <property-class>java.lang.String</property-class>
      <property-extension>
        <mfp:property-metadata>
          <mfp:translatable>true</mfp:translatable>
          <mfp:short-description>${md:getTranslatedString("SD_ATTRGROUP_ACCESSKEY_ATTR_VALUEANDACCESSKEY")}</mfp:short-description>
        </mfp:property-metadata>
        <mfp:virtual>true</mfp:virtual>
      </property-extension>
    </property>
    <property>
      <description><![CDATA[If set to TRUE on a form element, the component will automatically submit
     the enclosing form when an appropriate action takes place (a click, text
     change, etc.).]]>
      </description>
      <property-name>autoSubmit</property-name>
      <property-class>boolean</property-class>
      <default-value>false</default-value>
    </property>
    <component-extension>
      <mfp:component-supertype>org.apache.myfaces.trinidad.SelectInput</mfp:component-supertype>
      <mfp:renderer-type>org.apache.myfaces.trinidad.Color</mfp:renderer-type>
      <mfp:tag-name>tr:inputColor</mfp:tag-name>
      <mfp:tag-class>org.apache.myfaces.trinidadinternal.taglib.core.input.CoreInputColorTag</mfp:tag-class>
      <mfp:long-description><![CDATA[The inputColor component creates a text field for entering colors.
          Users can specify color values in one of three ways, depending on
          how the inputColor component is configured.
          <html:ul>
            <html:li>
            Users can type the color value directly in the field.
            This option is always available.
            </html:li>
            <html:li>
            Users can select a color value from a secondary dialog.
            This option may not be available in all look and feel
            implementations.  In particular, this option is not
            available on PDA look and feels.
            </html:li>
            <html:li>
            Users can select a color value from an inline chooseColor
            component.  In order to enable this option, the chooseColor
            must be placed in the same page as the inputColor, and the
            inputColor's paletteId attribute must be set to the id of
            the corresponding chooseColor.  Again, this option is
            not supported on PDA look and feel.
            </html:li>
          </html:ul>

          <html:p>
            The colorConverter can be used to control
            both the formatting that the inputColor uses when displaying
            color values, as well as the set of color format patterns that
            are accepted by the inputColor.  See the documentation for the
            colorConverter for more information.
          </html:p>]]>
      </mfp:long-description>
      <mfp:example>
        <mfp:source-code>
          <![CDATA[
<tr:inputColor name="color" value="#{color.colorValue3}" />
          ]]>
        </mfp:source-code>
      </mfp:example>
      <mfp:author>John Fallows</mfp:author>
      <mfp:component-metadata>
        <mfp:unsupported-agents>pda phone voice</mfp:unsupported-agents>
      </mfp:component-metadata>
      <mfp:java-constructor>
        <mfp:property-name>name</mfp:property-name>
      </mfp:java-constructor>
      <mfp:uix2-local-name>inputColor</mfp:uix2-local-name>
      <fmd:component-metadata>
        <fmd:allowed-child-components>NONE</fmd:allowed-child-components>
        <fmd:default-property>label</fmd:default-property>
      </fmd:component-metadata>
    </component-extension>
  </component>
</faces-config>
